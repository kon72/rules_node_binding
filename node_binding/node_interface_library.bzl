load(":versions.bzl", "PLATFORMS")

def _node_interface_library_impl(repository_ctx):
    version = repository_ctx.attr.node_version
    arch = PLATFORMS[repository_ctx.attr.platform].arch
    repository_ctx.download(
        url = ["https://nodejs.org/dist/v{version}/win-{arch}/node.lib".format(version = version, arch = arch)],
        output = "node.lib",
    )

    build_file_content = """\
# Generated by node_binding/node_interface_library.bzl

cc_import(
    name = "interface",
    interface_library = "node.lib",
    system_provided = True,
    visibility = ["//visibility:public"],
)
"""
    repository_ctx.file("BUILD.bazel", build_file_content)

node_interface_library = repository_rule(
    implementation = _node_interface_library_impl,
    attrs = {
        "platform": attr.string(
            doc = "The platform name for the Node.js interface library.",
            mandatory = True,
            values = PLATFORMS.keys(),
        ),
        "node_version": attr.string(
            doc = "The Node.js version.",
            mandatory = True,
        ),
    },
)

def _node_interface_library_aliases_impl(repository_ctx):
    repository_ctx.download(
        url = ["https://raw.githubusercontent.com/nodejs/node-gyp/a87d0bf458e57d9a8c8c113250bf6a9da952016d/src/win_delay_load_hook.cc"],
        output = "win_delay_load_hook.cc",
    )

    build_file_content = """\
# Generated by node_binding/node_interface_library.bzl
load("@rules_node_binding//node_binding:versions.bzl", "gen_node_config_settings")

gen_node_config_settings()

PLATFORMS = [
{platforms}
]

alias(
    name = "interface",
    actual = select({{":" + item: "@{name}_" + item + "//:interface" for item in PLATFORMS}}),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "win_delay_load_hook",
    srcs = ["win_delay_load_hook.cc"],
    defines = ["HOST_BINARY=\\\\\\"node.exe\\\\\\""],
    linkopts = [
        "delayimp.lib",
        "/DELAYLOAD:node.exe",
    ],
    visibility = ["//visibility:public"],
    alwayslink = True,
)
""".format(
        name = repository_ctx.attr.user_repository_name,
        platforms = "\n".join(["    \"{}\",".format(p) for p in repository_ctx.attr.platforms]),
    )
    repository_ctx.file("BUILD.bazel", build_file_content)

node_interface_library_aliases = repository_rule(
    implementation = _node_interface_library_aliases_impl,
    attrs = {
        "platforms": attr.string_list(
            doc = "List of platforms for which aliases shall be created",
        ),
        "user_repository_name": attr.string(
            mandatory = True,
            doc = "The base name for all created repositories, like 'node_interface_library'.",
        ),
    },
)

def register_node_interface_libraries(name, node_version):
    for platform in PLATFORMS.keys():
        node_interface_library(
            name = "{name}_{platform}".format(name = name, platform = platform),
            node_version = node_version,
            platform = platform,
        )

    node_interface_library_aliases(
        name = name,
        platforms = PLATFORMS.keys(),
        user_repository_name = name,
    )
